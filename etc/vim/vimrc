set nocompatible

set noswapfile
set nobackup
set autochdir " change directory to the current file
"@>menu
menu &Access.&vimrc <ESC>:e $HOME/.vimrc<cr>
menu &Access.&Error <ESC>/error<cr>
"menu York.func  <ESC>:e $HOME/func.vim<cr>
" Makes bash open in the working directory
let $CHERE_INVOKING=1

" Default path for Cygwin 64-bit, change accordingly
"set shell=C:\cygwin64\bin\bash.exe
"set shell=C:\cygwin64\bin\tcsh.exe

" Without --login, Cygwin won't mount some directories such as /usr/bin/
"set shellcmdflag=--login\ -c
"set shellcmdflag=-c
"set shellcmdflag=--login\ -i\ -c

" Default value is (, but bash needs "
"set shellxquote=\"

" Paths will use / instead of \
"set shellslash

"set ff=unix

set encoding=utf-8
set fo+=m

set linebreak
set nowrap
set guifont=Monospace\ 11
"set guifont=Consolas:h12
"set guifont=Monaco\ 10
"set guifont=Terminus\ 12
set completeopt=longest
"set columns=90      " width of the display
set bs=2            "backspace
set tw=0           "textwidth, with EOL
set sw=2            "swapname
set si              "simalt
set ru              "ruler
set sc              "showcmd
set smd             "showmode
set ic              "ignorecase
set ts=2            "tabstop=2
set expandtab
set incsearch       " incremental search
set hlsearch        " highlight search
set nu              " display line number
set iskeyword+=-
set iskeyword-=)
"set iskeyword+=/    " make double click select `/'
"set isfname

:filetype on        " turn on filetype detection
filetype plugin on
" C-X, C-O
"set omnifun=syntaxomplete#Complete
:syntax on          " 
":colorscheme koehler 
colorscheme torte
"Change the Folder highlight color to black
hi Folded guifg=#808080 guibg=black	ctermfg=darkgrey ctermbg=black cterm=bold term=bold
"----------------------------------------------------------------------
"@>Functions
"----------------------------------------------------------------------
func! JKL() range
  exec "normal '<"
  exec "normal O# {{{"
  exec "normal '>"
  exec "normal o# }}}"
endfunc

"@=Gnotes
func! Gnotes() range
  " Get lines in range
  let lines = getline(a:firstline,a:lastline)

  " Remove lines in range
  exec a:firstline . "," . a:lastline." delete"

  let position = a:firstline - 1

  let newlines = ["# kkk"]
  call add(newlines, "# {{{")
  call add(newlines, "gnotes {")
  call add(newlines, "*#. kkk")
  call add(newlines, "")
  call add(newlines, "# kkk")
  call add(newlines, "")

  " Append original text
  call extend(newlines, lines)

  call add(newlines, "}")
  call add(newlines, "# }}}")

  " Append new text to firstline - 1
  call append(position, newlines)

  " Move cursor back to first line
  call cursor(a:firstline,3)
endfunc

"Firefox_Reload
" {{{
func Firefox_Reload()
  silent !xdotool search --name "Mozilla" key ctrl+r
endfunc
" }}}
"Godel_Draw
" {{{
func Godel_Draw()

  let cwd=getcwd()

  if cwd =~ '\.godel'
    cd ..
    echom getcwd()
    silent !godel_draw.tcl
    silent !xdotool search --name "Mozilla" key ctrl+r

  else
    echom getcwd()
    silent !godel_draw.tcl
    silent !xdotool search --name "Mozilla" key ctrl+r
  endif

endfunc
" }}}
"Godel_Page
" {{{
func Godel_Page()

  let cwd=getcwd()

  if cwd =~ '\.godel'
    cd ..
    echom getcwd()
    silent !fa

  else
    echom getcwd()
    silent !fa
  endif

endfunc
" }}}

"vnoremap <a
vnoremap ;q :call JKL()<CR>
vnoremap ;g :call Gnotes()<CR>

noremap ,s :source $HOME/func.vim<CR>
noremap ;r :call Run()<CR>

nnoremap f <C-f>
nnoremap b <C-b>
nnoremap e <C-e>
nnoremap t <C-y>
"nnoremap <c-j> zj
"nnoremap <c-k> zk
nnoremap <C-J> :MBEbn<cr>
nnoremap <C-K> :MBEbp<cr>
nnoremap qq :qa<cr>
inoremap <c-j> <c-o>zj
inoremap <c-k> <c-o>zk
noremap ;i :cal AutoInst()<cr>
noremap ;a :cal AutoArg()<cr>
noremap ;j :source a.vim<cr>
noremap ;k :call Dev()<cr>
noremap cp :call CheckPath()<cr>
nnoremap <C-J> :MBEbn<cr>
nnoremap <C-K> :MBEbp<cr>
" Move the line under the cursor up/down
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv
" ==========================================================================
" Function Key Mapping 
" ==========================================================================
function! SaveOrSkip()
  if &modified == 1
    write
  else
    echo '(No changes need to be saved)'
  endif 
endfunction!
" ==========================================================================
"@>Function Key Mapping
" ==========================================================================
" Alt + came from <Ctrl-v><Alt+>
"map 翻 :QuickFontBigger<cr>
" Alt - came from <Ctrl-v><Alt->
"map 簫 :QuickFontSmaller<cr>

"map <F1> :call SaveOrSkip()<cr>
map <F2> :call SaveOrSkip()<cr>
"map <F3> :split<cr>
"map <F3> :silent !gd<cr>
map <F3> :silent call Godel_Draw()<cr>

" Copy full path of current editing file to xclipboard
"map <F4> :let @* = expand("%:p")<CR>
" Changing pwd to the path of current editing file
"map <F4> :silent !fa<cr>
map <F4> :call Firefox_Reload()<cr>

"map <F5> :lcd %:p:h<cr>
map <F5> :Bkmark<CR>
map <F6> :set virtualedit=<cr>

" You can toggle the syntax on/off with this command
map <F7> :if has("syntax_items") <Bar> syntax off <CR>
         \else <Bar> syntax on <Bar>
         \endif <CR>
"toggle on/off highlightsearch
map <F8> :%d<cr>
map <F9> :set nowrap!<bar>set nowrap?<cr>
map <F10> :bn<cr>
map <F11> :bN<cr>
map <F12> :set lines=70 columns=130<cr>

imap <C-j> <ESC>la
inoremap () ()<ESC>:let leavechar=")"<CR>i
inoremap [] []<ESC>:let leavechar="]"<CR>i
inoremap {} {}<ESC>:let leavechar="}"<CR>i
inoremap <> <><ESC>:let leavechar=">"<CR>i
inoremap "" ""<ESC>:let leavechar="\""<CR>i
"
""inoremap ( ()<ESC>:let leavechar=")"<CR>i
""imap <C-j> <ESC>:exec "normal f" . leavechar<CR>a
"vnoremap _/ <ESC>`>o// }}}<ESC>`<O// {{{<ESC>
"vnoremap _( <ESC>`>a)<ESC>`<i(<ESC>
"vnoremap _{ <ESC>`>a}<ESC>`<i{<ESC>
iab  hml   <c-r>=strftime("%m/%d/%Y %H:%M")<cr>
iab  idd   <c-r>=strftime("%m/%d/%Y")<cr>

" ==========================================================================
" For development
" ==========================================================================

fun! CheckPath ()
  execute "normal yy"
  let s = @"
  let path_str = matchstr(s,'[\-0-9a-zA-Z./_]\+/[\-0-9a-zA-Z./_]\+')
  if filereadable(path_str)
    echohl NONE | echo "Found!"
  else
    echohl ErrorMsg | echo path_str." Not Found!"
  endif
endfun

func! <SID>AdditionalSyntax()
  let lastline = getline("$")
  if lastline =~ 'syntax:tcl_library'
    :source $HOME/.vim/syntax_add/tcl_library.vim
  endif
endfunc

autocmd BufRead * call s:AdditionalSyntax()

:menu &Dump.&dd <ESC>A -filter 5<ESC>G:r ~/tt.ghtm<cr>
:menu &Dump.&2time <ESC>:g/時間/d<cr>
:menu &Dump.&godel <ESC>:e /home/york/github/godel/bin/godel.tcl<cr>
:menu &Dump.&js <ESC>:e /home/york/github/godel/scripts/js/godel.js<cr>
"set runtimepath=c:/cygwin64/home/USER/.vim,$VIMRUNTIME

" vim:fdm=marker
